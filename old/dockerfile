# Base stage to download latest release info
FROM alpine:latest AS fetcher

# Install necessary tools
RUN apk add --no-cache curl jq

# Get latest release version and download files with error checking
WORKDIR /downloads
RUN set -e && \
    echo "Fetching latest Talos release version..." && \
    latest_version=$(curl -sS https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r .tag_name) && \
    if [ -z "$latest_version" ]; then \
        echo "Failed to get latest version" && exit 1; \
    fi && \
    echo "Downloading Talos ${latest_version} files..." && \
    curl -L -o vmlinuz https://github.com/siderolabs/talos/releases/download/${latest_version}/vmlinuz && \
    curl -L -o initramfs.xz https://github.com/siderolabs/talos/releases/download/${latest_version}/initramfs.xz && \
    echo ${latest_version} > version.txt && \
    # Verify files exist and have size
    if [ ! -s vmlinuz ] || [ ! -s initramfs.xz ]; then \
        echo "Failed to download required files" && exit 1; \
    fi

# Final stage
FROM quay.io/poseidon/matchbox:latest

# Add build arg and env var for GitHub repo
ARG GITHUB_REPO
ENV GITHUB_REPO=${GITHUB_REPO}

# Create necessary directories
RUN mkdir -p /var/lib/matchbox/assets \
    /var/lib/matchbox/profiles \
    /var/lib/matchbox/groups \
    /var/lib/tftpboot \
    /etc/supervisor.d

# Install required packages
RUN apk add --no-cache \
    curl \
    jq \
    dnsmasq \
    supervisor \
    syslinux

# Copy files from fetcher stage
COPY --from=fetcher /downloads/vmlinuz /var/lib/matchbox/assets/vmlinuz
COPY --from=fetcher /downloads/initramfs.xz /var/lib/matchbox/assets/initramfs.xz
COPY --from=fetcher /downloads/version.txt /var/lib/matchbox/assets/version.txt

# Set up boot files
RUN cp /usr/share/syslinux/lpxelinux.0 /var/lib/tftpboot/ && \
    cp /usr/share/syslinux/ldlinux.c32 /var/lib/tftpboot/ && \
    ln -s /var/lib/matchbox/assets/vmlinuz /var/lib/tftpboot/vmlinuz && \
    ln -s /var/lib/matchbox/assets/initramfs.xz /var/lib/tftpboot/initramfs.xz

# Configure dnsmasq for TFTP
RUN echo 'enable-tftp\n\
tftp-root=/var/lib/tftpboot\n\
dhcp-boot=lpxelinux.0\n\
tftp-no-blocksize' > /etc/dnsmasq.conf

# Create supervisord.conf with explicit paths
RUN echo '[unix_http_server]\n\
file=/var/run/supervisor.sock\n\
chmod=0700\n\
\n\
[supervisord]\n\
nodaemon=true\n\
logfile=/var/log/supervisor/supervisord.log\n\
pidfile=/var/run/supervisord.pid\n\
childlogdir=/var/log/supervisor\n\
\n\
[rpcinterface:supervisor]\n\
supervisor.rpcinterface_factory=supervisor.rpcinterface:make_main_rpcinterface\n\
\n\
[supervisorctl]\n\
serverurl=unix:///var/run/supervisor.sock\n\
\n\
[program:matchbox]\n\
command=/matchbox -address=0.0.0.0:8080 -log-level=debug\n\
stdout_logfile=/dev/stdout\n\
stdout_logfile_maxbytes=0\n\
stderr_logfile=/dev/stderr\n\
stderr_logfile_maxbytes=0\n\
autorestart=true\n\
\n\
[program:dnsmasq]\n\
command=dnsmasq -d -C /etc/dnsmasq.conf\n\
stdout_logfile=/dev/stdout\n\
stdout_logfile_maxbytes=0\n\
stderr_logfile=/dev/stderr\n\
stderr_logfile_maxbytes=0\n\
autorestart=true' > /etc/supervisord.conf

# Ensure proper permissions
RUN mkdir -p /var/log/supervisor /var/run && \
    chmod 755 /var/run && \
    chmod 755 /var/log/supervisor

# Create entrypoint script
RUN echo '#!/bin/sh' > /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Extract owner and repo from GITHUB_REPO URL' >> /entrypoint.sh && \
    echo 'REPO_PATH=$(echo ${GITHUB_REPO} | sed "s|https://github.com/||")' >> /entrypoint.sh && \
    echo 'RAW_URL="https://raw.githubusercontent.com/${REPO_PATH}/main"' >> /entrypoint.sh && \
    echo 'API_URL="https://api.github.com/repos/${REPO_PATH}/contents"' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Download profiles' >> /entrypoint.sh && \
    echo 'echo "Fetching profiles list..."' >> /entrypoint.sh && \
    echo 'curl -s "${API_URL}/matchbox/profiles" | jq -r ".[] | .name" | while read file; do' >> /entrypoint.sh && \
    echo '  echo "Downloading profile: $file"' >> /entrypoint.sh && \
    echo '  curl -L "${RAW_URL}/matchbox/profiles/${file}" -o "/var/lib/matchbox/profiles/${file}"' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Download groups' >> /entrypoint.sh && \
    echo 'echo "Fetching groups list..."' >> /entrypoint.sh && \
    echo 'curl -s "${API_URL}/matchbox/groups" | jq -r ".[] | .name" | while read file; do' >> /entrypoint.sh && \
    echo '  echo "Downloading group: $file"' >> /entrypoint.sh && \
    echo '  curl -L "${RAW_URL}/matchbox/groups/${file}" -o "/var/lib/matchbox/groups/${file}"' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Start supervisord with explicit config file' >> /entrypoint.sh && \
    echo 'exec /usr/bin/supervisord -c /etc/supervisord.conf' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Set volume configuration
VOLUME ["/var/lib/matchbox"]

# Expose ports
EXPOSE 8080 69/udp

HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD nc -z localhost 8080 || exit 1

ENTRYPOINT ["/entrypoint.sh"]
