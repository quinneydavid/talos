FROM alpine:latest

# Install required packages (including gettext for envsubst)
RUN apk add --no-cache curl jq ca-certificates iputils openssl wget bash gettext

# Install yq from binary since apk package is not available
RUN wget https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64 -O /usr/bin/yq && \
    chmod +x /usr/bin/yq

# Update CA certificates
RUN update-ca-certificates

# Create required directories
RUN mkdir -p /var/lib/matchbox/assets \
    /var/lib/matchbox/profiles \
    /var/lib/matchbox/groups \
    /var/lib/matchbox/configs \
    /configs \
    /scripts && \
    chmod -R 755 /var/lib/matchbox

# Copy local files
COPY scripts/generate-configs.sh /scripts/

# Set permissions and verify script
RUN chmod +x /scripts/generate-configs.sh && \
    ls -la /scripts/generate-configs.sh && \
    echo "Script permissions set and verified"

# Create entrypoint script
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Start matchbox server in background' >> /entrypoint.sh && \
    echo '/matchbox -address=0.0.0.0:8080 -data-path=/var/lib/matchbox -assets-path=/var/lib/matchbox/assets &' >> /entrypoint.sh && \
    echo 'MATCHBOX_PID=$!' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Download Talos assets' >> /entrypoint.sh && \
    echo 'TALOS_VERSION=${TALOS_VERSION:-latest}' >> /entrypoint.sh && \
    echo 'if [ "${TALOS_VERSION}" = "latest" ]; then' >> /entrypoint.sh && \
    echo '    TALOS_VERSION=$(curl -sf https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r .tag_name)' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo 'echo "Using version: ${TALOS_VERSION}"' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Download Talos assets from custom PXE URL' >> /entrypoint.sh && \
    echo 'echo "Downloading kernel..."' >> /entrypoint.sh && \
    echo 'if [[ "${TALOS_VERSION}" == *"pxe.factory.talos.dev"* ]]; then' >> /entrypoint.sh && \
    echo '  SCHEMATIC_ID=$(echo "${TALOS_VERSION}" | sed -n "s|.*/pxe/\([^/]*\)/.*|\1|p")' >> /entrypoint.sh && \
    echo '  TALOS_VER=$(echo "${TALOS_VERSION}" | sed -n "s|.*/pxe/[^/]*/\([^/]*\)/.*|\1|p")' >> /entrypoint.sh && \
    echo '  echo "Using factory image: $SCHEMATIC_ID version: $TALOS_VER"' >> /entrypoint.sh && \
    echo '  KERNEL_URL="https://pxe.factory.talos.dev/image/${SCHEMATIC_ID}/${TALOS_VER}/kernel-amd64"' >> /entrypoint.sh && \
    echo '  echo "Kernel URL: ${KERNEL_URL}"' >> /entrypoint.sh && \
    echo '  curl -fSL --progress-bar --retry 3 --retry-delay 3 -H "Accept: application/octet-stream" -o /var/lib/matchbox/assets/vmlinuz "${KERNEL_URL}"' >> /entrypoint.sh && \
    echo '  echo "Downloading initramfs.xz..."' >> /entrypoint.sh && \
    echo '  INITRAMFS_URL="https://pxe.factory.talos.dev/image/${SCHEMATIC_ID}/${TALOS_VER}/initramfs-amd64.xz"' >> /entrypoint.sh && \
    echo '  echo "Initramfs URL: ${INITRAMFS_URL}"' >> /entrypoint.sh && \
    echo '  curl -fSL --progress-bar --retry 3 --retry-delay 3 -H "Accept: application/octet-stream" -o /var/lib/matchbox/assets/initramfs.xz "${INITRAMFS_URL}"' >> /entrypoint.sh && \
    echo 'else' >> /entrypoint.sh && \
    echo '  echo "Error: Unsupported TALOS_VERSION format"' >> /entrypoint.sh && \
    echo '  exit 1' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo 'echo "Downloading talosctl..."' >> /entrypoint.sh && \
    echo 'wget -q --show-progress --progress=bar:force:noscroll https://github.com/siderolabs/talos/releases/download/v1.9.0/talosctl-linux-amd64 -O /usr/local/bin/talosctl' >> /entrypoint.sh && \
    echo 'chmod +x /usr/local/bin/talosctl' >> /entrypoint.sh && \
    echo 'echo "${TALOS_VERSION}" > /var/lib/matchbox/assets/version.txt' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Download network config template from GitHub' >> /entrypoint.sh && \
    echo 'echo "Downloading network config template..."' >> /entrypoint.sh && \
    echo 'if ! curl -fSL --retry 3 --retry-delay 3 -o /var/lib/matchbox/network-config.template.yaml "${GITHUB_REPO}/raw/main/configs/network-config.template.yaml"; then' >> /entrypoint.sh && \
    echo '  echo "Error: Failed to download network config template from GitHub"' >> /entrypoint.sh && \
    echo '  exit 1' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Process template and replace variables' >> /entrypoint.sh && \
    echo 'echo "Processing network config template..."' >> /entrypoint.sh && \
    echo 'envsubst < /var/lib/matchbox/network-config.template.yaml > /var/lib/matchbox/network-config.yaml' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Verify network config exists' >> /entrypoint.sh && \
    echo 'if [ ! -f /var/lib/matchbox/network-config.yaml ]; then' >> /entrypoint.sh && \
    echo '  echo "Error: network-config.yaml not found"' >> /entrypoint.sh && \
    echo '  exit 1' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Verify required environment variables' >> /entrypoint.sh && \
    echo 'required_vars="GITHUB_REPO"' >> /entrypoint.sh && \
    echo 'for var in $required_vars; do' >> /entrypoint.sh && \
    echo '  if [ -z "${!var}" ]; then' >> /entrypoint.sh && \
    echo '    echo "$var environment variable must be set"' >> /entrypoint.sh && \
    echo '    exit 1' >> /entrypoint.sh && \
    echo '  fi' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Get all cluster IDs from network-config.yaml' >> /entrypoint.sh && \
    echo 'echo "Reading cluster configurations from network-config.yaml..."' >> /entrypoint.sh && \
    echo 'CLUSTER_IDS=$(yq e ".clusters | keys | .[]" /var/lib/matchbox/network-config.yaml)' >> /entrypoint.sh && \
    echo 'if [ -z "$CLUSTER_IDS" ]; then' >> /entrypoint.sh && \
    echo '  echo "Error: No clusters found in network-config.yaml"' >> /entrypoint.sh && \
    echo '  exit 1' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Process each cluster' >> /entrypoint.sh && \
    echo 'FORCE_REGENERATE=${FORCE_REGENERATE:-false}' >> /entrypoint.sh && \
    echo 'for CLUSTER_ID in $CLUSTER_IDS; do' >> /entrypoint.sh && \
    echo '  echo "Processing cluster: ${CLUSTER_ID}"' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '  # Check if talosconfig already exists for this cluster' >> /entrypoint.sh && \
    echo '  if [ -f "/var/lib/matchbox/assets/${CLUSTER_ID}-talosconfig" ] && [ "${FORCE_REGENERATE}" != "true" ]; then' >> /entrypoint.sh && \
    echo '    echo "Configuration for cluster ${CLUSTER_ID} already exists. Skipping generation."' >> /entrypoint.sh && \
    echo '    continue' >> /entrypoint.sh && \
    echo '  fi' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '  # Generate Talos configurations for this cluster' >> /entrypoint.sh && \
    echo '  echo "Generating Talos configurations for cluster: ${CLUSTER_ID}..."' >> /entrypoint.sh && \
    echo '  if [ ! -x /scripts/generate-configs.sh ]; then' >> /entrypoint.sh && \
    echo '    echo "Error: generate-configs.sh not found or not executable"' >> /entrypoint.sh && \
    echo '    ls -la /scripts/' >> /entrypoint.sh && \
    echo '    exit 1' >> /entrypoint.sh && \
    echo '  fi' >> /entrypoint.sh && \
    echo '  CLUSTER_ID=${CLUSTER_ID} bash /scripts/generate-configs.sh' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Create ready file for TFTP server' >> /entrypoint.sh && \
    echo 'touch /var/lib/matchbox/assets/.ready' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Wait for matchbox to exit' >> /entrypoint.sh && \
    echo 'wait $MATCHBOX_PID' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Install matchbox binary
RUN curl -LO --retry 3 --retry-delay 3 https://github.com/poseidon/matchbox/releases/download/v0.10.0/matchbox-v0.10.0-linux-amd64.tar.gz && \
    tar xzf matchbox-v0.10.0-linux-amd64.tar.gz && \
    mv matchbox-v0.10.0-linux-amd64/matchbox /matchbox && \
    rm -rf matchbox-v0.10.0-linux-amd64* && \
    chmod +x /matchbox

# Create data volume
VOLUME /var/lib/matchbox

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080

ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
