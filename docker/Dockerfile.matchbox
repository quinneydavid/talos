FROM alpine:latest as fetcher

RUN apk add --no-cache curl jq

WORKDIR /downloads

# Fetch latest version dynamically
RUN set -e && \
    echo "Fetching latest Talos version..." && \
    TALOS_VERSION=$(curl -s https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r .tag_name) && \
    if [ -z "$TALOS_VERSION" ]; then \
        echo "Failed to get latest version" && exit 1; \
    fi && \
    echo "Latest version: ${TALOS_VERSION}" && \
    echo "Downloading vmlinuz..." && \
    curl -fSL --progress-bar -H "Accept: application/octet-stream" -o vmlinuz "https://github.com/siderolabs/talos/releases/download/${TALOS_VERSION}/vmlinuz-amd64" && \
    echo "Downloading initramfs.xz..." && \
    curl -fSL --progress-bar -H "Accept: application/octet-stream" -o initramfs.xz "https://github.com/siderolabs/talos/releases/download/${TALOS_VERSION}/initramfs-amd64.xz" && \
    echo "Downloading talosctl..." && \
    curl -fSL --progress-bar -H "Accept: application/octet-stream" -o talosctl "https://github.com/siderolabs/talos/releases/download/${TALOS_VERSION}/talosctl-linux-amd64" && \
    chmod +x talosctl && \
    echo "${TALOS_VERSION}" > version.txt

FROM quay.io/poseidon/matchbox:latest

RUN apk add --no-cache curl jq ca-certificates

RUN mkdir -p /var/lib/matchbox/assets \
    /var/lib/matchbox/profiles \
    /var/lib/matchbox/groups \
    /configs \
    /scripts

COPY --from=fetcher /downloads/vmlinuz /var/lib/matchbox/assets/vmlinuz
COPY --from=fetcher /downloads/initramfs.xz /var/lib/matchbox/assets/initramfs.xz
COPY --from=fetcher /downloads/version.txt /var/lib/matchbox/assets/version.txt
COPY --from=fetcher /downloads/talosctl /usr/local/bin/talosctl

# Copy base configs and generation script
COPY configs/controlplane.yaml /configs/controlplane.yaml
COPY configs/worker.yaml /configs/worker.yaml
COPY scripts/generate-configs.sh /scripts/generate-configs.sh
RUN chmod +x /scripts/generate-configs.sh

RUN echo '#!/bin/sh' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Verify required environment variables' >> /entrypoint.sh && \
    echo 'if [ -z "$GITHUB_REPO" ]; then' >> /entrypoint.sh && \
    echo '  echo "GITHUB_REPO environment variable must be set"' >> /entrypoint.sh && \
    echo '  exit 1' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Verifying assets..."' >> /entrypoint.sh && \
    echo 'ls -lh /var/lib/matchbox/assets' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Fetching profiles..."' >> /entrypoint.sh && \
    echo 'echo "Downloading profile: control-plane.json"' >> /entrypoint.sh && \
    echo 'curl -fSL -o /var/lib/matchbox/profiles/control-plane.json "${GITHUB_REPO}/raw/main/matchbox/profiles/control-plane.json"' >> /entrypoint.sh && \
    echo 'echo "Downloading profile: worker.json"' >> /entrypoint.sh && \
    echo 'curl -fSL -o /var/lib/matchbox/profiles/worker.json "${GITHUB_REPO}/raw/main/matchbox/profiles/worker.json"' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Fetching groups..."' >> /entrypoint.sh && \
    echo 'for node in cp1 cp2 cp3 worker1 worker2; do' >> /entrypoint.sh && \
    echo '  echo "Downloading group: $node.json"' >> /entrypoint.sh && \
    echo '  curl -fSL -o /var/lib/matchbox/groups/$node.json "${GITHUB_REPO}/raw/main/matchbox/groups/$node.json"' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Generating Talos configurations..."' >> /entrypoint.sh && \
    echo 'cd /scripts && ./generate-configs.sh' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'exec /matchbox -address=0.0.0.0:8080 "$@"' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
