FROM alpine:latest

RUN apk add --no-cache curl jq ca-certificates yq

# Create required directories
RUN mkdir -p /var/lib/matchbox/assets \
    /var/lib/matchbox/profiles \
    /var/lib/matchbox/groups \
    /configs \
    /scripts

# Copy generation script
COPY scripts/generate-configs.sh /scripts/generate-configs.sh
RUN chmod +x /scripts/generate-configs.sh

# Create download script
RUN echo '#!/bin/sh' > /download-talos.sh && \
    echo 'set -e' >> /download-talos.sh && \
    echo '' >> /download-talos.sh && \
    echo 'VERSION=${TALOS_VERSION:-latest}' >> /download-talos.sh && \
    echo 'echo "Fetching Talos version: ${VERSION}..."' >> /download-talos.sh && \
    echo 'if [ "${VERSION}" = "latest" ]; then' >> /download-talos.sh && \
    echo '    VERSION=$(curl -s https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r .tag_name)' >> /download-talos.sh && \
    echo 'fi' >> /download-talos.sh && \
    echo 'if [ -z "$VERSION" ]; then' >> /download-talos.sh && \
    echo '    echo "Failed to get version" && exit 1' >> /download-talos.sh && \
    echo 'fi' >> /download-talos.sh && \
    echo 'echo "Using version: ${VERSION}"' >> /download-talos.sh && \
    echo 'echo "Downloading vmlinuz..."' >> /download-talos.sh && \
    echo 'curl -fSL --progress-bar -H "Accept: application/octet-stream" -o /var/lib/matchbox/assets/vmlinuz "https://github.com/siderolabs/talos/releases/download/${VERSION}/vmlinuz-amd64"' >> /download-talos.sh && \
    echo 'echo "Downloading initramfs.xz..."' >> /download-talos.sh && \
    echo 'curl -fSL --progress-bar -H "Accept: application/octet-stream" -o /var/lib/matchbox/assets/initramfs.xz "https://github.com/siderolabs/talos/releases/download/${VERSION}/initramfs-amd64.xz"' >> /download-talos.sh && \
    echo 'echo "Downloading talosctl..."' >> /download-talos.sh && \
    echo 'curl -fSL --progress-bar -H "Accept: application/octet-stream" -o /usr/local/bin/talosctl "https://github.com/siderolabs/talos/releases/download/${VERSION}/talosctl-linux-amd64"' >> /download-talos.sh && \
    echo 'chmod +x /usr/local/bin/talosctl' >> /download-talos.sh && \
    echo 'echo "${VERSION}" > /var/lib/matchbox/assets/version.txt' >> /download-talos.sh && \
    echo 'touch /var/lib/matchbox/assets/.ready' >> /download-talos.sh && \
    chmod +x /download-talos.sh

# Create entrypoint script
RUN echo '#!/bin/sh' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Download Talos assets' >> /entrypoint.sh && \
    echo '/download-talos.sh' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Verify required environment variables' >> /entrypoint.sh && \
    echo 'if [ -z "$GITHUB_REPO" ]; then' >> /entrypoint.sh && \
    echo '  echo "GITHUB_REPO environment variable must be set"' >> /entrypoint.sh && \
    echo '  exit 1' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'REPO_OWNER=$(echo $GITHUB_REPO | cut -d "/" -f4)' >> /entrypoint.sh && \
    echo 'REPO_NAME=$(echo $GITHUB_REPO | cut -d "/" -f5)' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Verifying assets..."' >> /entrypoint.sh && \
    echo 'ls -lh /var/lib/matchbox/assets' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Downloading network config..."' >> /entrypoint.sh && \
    echo 'curl -fSL -o /var/lib/matchbox/network-config.yaml "https://raw.githubusercontent.com/${REPO_OWNER}/${REPO_NAME}/main/configs/network-config.yaml"' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Generating Talos configurations..."' >> /entrypoint.sh && \
    echo '/scripts/generate-configs.sh' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'exec /matchbox -address=0.0.0.0:8080 -data-path=/var/lib/matchbox -assets-path=/var/lib/matchbox/assets "$@"' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Install matchbox binary
RUN curl -LO https://github.com/poseidon/matchbox/releases/download/v0.10.0/matchbox-v0.10.0-linux-amd64.tar.gz && \
    tar xzf matchbox-v0.10.0-linux-amd64.tar.gz && \
    mv matchbox-v0.10.0-linux-amd64/matchbox /matchbox && \
    rm -rf matchbox-v0.10.0-linux-amd64*

# Create data volume
VOLUME /var/lib/matchbox

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080

ENTRYPOINT ["/entrypoint.sh"]
