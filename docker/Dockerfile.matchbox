FROM alpine:latest as fetcher

RUN apk add --no-cache curl jq

WORKDIR /downloads

# Fetch latest version dynamically
RUN set -e && \
    echo "Fetching latest Talos version..." && \
    TALOS_VERSION=$(curl -s https://api.github.com/repos/siderolabs/talos/releases/latest | jq -r .tag_name) && \
    if [ -z "$TALOS_VERSION" ]; then \
        echo "Failed to get latest version" && exit 1; \
    fi && \
    echo "Latest version: ${TALOS_VERSION}" && \
    echo "Downloading vmlinuz..." && \
    curl -fSL --progress-bar -H "Accept: application/octet-stream" -o vmlinuz "https://github.com/siderolabs/talos/releases/download/${TALOS_VERSION}/vmlinuz-amd64" && \
    echo "Downloading initramfs.xz..." && \
    curl -fSL --progress-bar -H "Accept: application/octet-stream" -o initramfs.xz "https://github.com/siderolabs/talos/releases/download/${TALOS_VERSION}/initramfs-amd64.xz" && \
    echo "${TALOS_VERSION}" > version.txt

FROM quay.io/poseidon/matchbox:latest

RUN apk add --no-cache curl jq gettext ca-certificates && \
    curl -fSL -o /bin/vault.zip https://releases.hashicorp.com/vault/1.15.2/vault_1.15.2_linux_amd64.zip && \
    unzip /bin/vault.zip -d /bin && \
    rm /bin/vault.zip && \
    chmod +x /bin/vault

RUN mkdir -p /var/lib/matchbox/assets \
    /var/lib/matchbox/profiles \
    /var/lib/matchbox/groups

COPY --from=fetcher /downloads/vmlinuz /var/lib/matchbox/assets/vmlinuz
COPY --from=fetcher /downloads/initramfs.xz /var/lib/matchbox/assets/initramfs.xz
COPY --from=fetcher /downloads/version.txt /var/lib/matchbox/assets/version.txt

# Add template processing script
RUN echo '#!/bin/sh' > /usr/local/bin/process_template && \
    echo 'template_file="$1"' >> /usr/local/bin/process_template && \
    echo 'output_file="$2"' >> /usr/local/bin/process_template && \
    echo 'metadata="$3"' >> /usr/local/bin/process_template && \
    echo '' >> /usr/local/bin/process_template && \
    echo '# Function to get value from Vault' >> /usr/local/bin/process_template && \
    echo 'get_vault_secret() {' >> /usr/local/bin/process_template && \
    echo '    path="$1"' >> /usr/local/bin/process_template && \
    echo '    key="$2"' >> /usr/local/bin/process_template && \
    echo '    vault read -format=json "secret/data/$path" | jq -r ".data.data.$key"' >> /usr/local/bin/process_template && \
    echo '}' >> /usr/local/bin/process_template && \
    echo '' >> /usr/local/bin/process_template && \
    echo '# Create temporary file with metadata substitutions' >> /usr/local/bin/process_template && \
    echo 'temp_file=$(mktemp)' >> /usr/local/bin/process_template && \
    echo 'echo "$metadata" > "$temp_file"' >> /usr/local/bin/process_template && \
    echo '' >> /usr/local/bin/process_template && \
    echo '# Process the template' >> /usr/local/bin/process_template && \
    echo 'content=$(cat "$template_file")' >> /usr/local/bin/process_template && \
    echo '' >> /usr/local/bin/process_template && \
    echo '# Replace Vault template variables' >> /usr/local/bin/process_template && \
    echo 'while IFS= read -r line; do' >> /usr/local/bin/process_template && \
    echo '    if echo "$line" | grep -q "{{ vault "; then' >> /usr/local/bin/process_template && \
    echo '        path=$(echo "$line" | sed -n '\''s/.*vault "\([^"]*\)".*/\1/p'\'')' >> /usr/local/bin/process_template && \
    echo '        key=$(echo "$line" | sed -n '\''s/.*"\([^"]*\)"}.*/\1/p'\'' | cut -d" " -f2)' >> /usr/local/bin/process_template && \
    echo '        value=$(get_vault_secret "$path" "$key")' >> /usr/local/bin/process_template && \
    echo '        content=$(echo "$content" | sed "s|{{ vault \"$path\" \"$key\" }}|$value|g")' >> /usr/local/bin/process_template && \
    echo '    fi' >> /usr/local/bin/process_template && \
    echo 'done <<< "$content"' >> /usr/local/bin/process_template && \
    echo '' >> /usr/local/bin/process_template && \
    echo '# Process metadata substitutions' >> /usr/local/bin/process_template && \
    echo 'echo "$content" | envsubst "$(cat $temp_file)" > "$output_file"' >> /usr/local/bin/process_template && \
    echo '' >> /usr/local/bin/process_template && \
    echo '# Cleanup' >> /usr/local/bin/process_template && \
    echo 'rm "$temp_file"' >> /usr/local/bin/process_template && \
    chmod +x /usr/local/bin/process_template

RUN echo '#!/bin/sh' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Verify required environment variables' >> /entrypoint.sh && \
    echo 'if [ -z "$VAULT_ADDR" ] || [ -z "$VAULT_TOKEN" ] || [ -z "$GITHUB_REPO" ]; then' >> /entrypoint.sh && \
    echo '  echo "VAULT_ADDR, VAULT_TOKEN, and GITHUB_REPO environment variables must be set"' >> /entrypoint.sh && \
    echo '  exit 1' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Configure Vault' >> /entrypoint.sh && \
    echo 'export VAULT_ADDR' >> /entrypoint.sh && \
    echo 'export VAULT_TOKEN' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Verifying assets..."' >> /entrypoint.sh && \
    echo 'ls -lh /var/lib/matchbox/assets' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Fetching groups..."' >> /entrypoint.sh && \
    echo 'for node in cp1 cp2 cp3 worker1 worker2; do' >> /entrypoint.sh && \
    echo '  echo "Downloading group: $node.json"' >> /entrypoint.sh && \
    echo '  curl -fSL -o /var/lib/matchbox/groups/$node.json "${GITHUB_REPO}/raw/main/matchbox/groups/$node.json"' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Fetching Talos config templates..."' >> /entrypoint.sh && \
    echo 'echo "Downloading template: controlplane.yaml.template"' >> /entrypoint.sh && \
    echo 'curl -fSL -o /var/lib/matchbox/assets/controlplane.yaml.template "${GITHUB_REPO}/raw/main/configs/controlplane.yaml"' >> /entrypoint.sh && \
    echo 'echo "Downloading template: worker.yaml.template"' >> /entrypoint.sh && \
    echo 'curl -fSL -o /var/lib/matchbox/assets/worker.yaml.template "${GITHUB_REPO}/raw/main/configs/worker.yaml"' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'echo "Fetching profiles..."' >> /entrypoint.sh && \
    echo 'echo "Downloading profile: control-plane.json"' >> /entrypoint.sh && \
    echo 'curl -fSL -o /var/lib/matchbox/profiles/control-plane.json "${GITHUB_REPO}/raw/main/matchbox/profiles/control-plane.json"' >> /entrypoint.sh && \
    echo 'echo "Downloading profile: worker.json"' >> /entrypoint.sh && \
    echo 'curl -fSL -o /var/lib/matchbox/profiles/worker.json "${GITHUB_REPO}/raw/main/matchbox/profiles/worker.json"' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo '# Process templates for each node' >> /entrypoint.sh && \
    echo 'for node in cp1 cp2 cp3; do' >> /entrypoint.sh && \
    echo '  metadata=$(jq -r .metadata /var/lib/matchbox/groups/$node.json)' >> /entrypoint.sh && \
    echo '  /usr/local/bin/process_template /var/lib/matchbox/assets/controlplane.yaml.template /var/lib/matchbox/assets/controlplane-$node.yaml "$metadata"' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'for node in worker1 worker2; do' >> /entrypoint.sh && \
    echo '  metadata=$(jq -r .metadata /var/lib/matchbox/groups/$node.json)' >> /entrypoint.sh && \
    echo '  /usr/local/bin/process_template /var/lib/matchbox/assets/worker.yaml.template /var/lib/matchbox/assets/worker-$node.yaml "$metadata"' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo '' >> /entrypoint.sh && \
    echo 'exec /matchbox -address=0.0.0.0:8080 "$@"' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
